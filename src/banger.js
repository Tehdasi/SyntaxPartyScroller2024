var bangerState= 
{
    step: 0,
    pattern: null,
};


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const _909CHData = "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VVVVVVVVVVUvqQUaAPIuJBhykCIETMlBlngeR0nMiUipFeyObirmFubmuBDR0dI5H9lsssstlisFBAwaOhkZcv/+/3KmjSij4tSRE4ssy0FkQYSBAR5loLRo0sqxKIl/qkq/9Wr/VJV0qkgALUclxUVFjQFCooJDQFFRYkaCoo3FRb9QsxNQuz/1ivWKf/iv+Kt//F1MQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+5Jkhw/zDzwxAeM1QirgFxcAIwAAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV" +
    "VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV" +
    "";
const _909SDData = "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qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+5Jkl4/zzUgjMeM0YjQB1KAYxiZAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq" +
    "";
const _909BDData = "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
    "";
const _909OHData = "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" +
    "";
var _909CHBuffer = Uint8ClampedArray.from(window.atob(_909CHData), c => c.charCodeAt(0)).buffer;
var _909SDBuffer = Uint8ClampedArray.from(window.atob(_909SDData), c => c.charCodeAt(0)).buffer;
var _909BDBuffer = Uint8ClampedArray.from(window.atob(_909BDData), c => c.charCodeAt(0)).buffer;
var _909OHBuffer = Uint8ClampedArray.from(window.atob(_909OHData), c => c.charCodeAt(0)).buffer;
function ThreeOhGen() {
    let noteSet = genericParameter("note set", ['C1']);
    let newNotes = trigger("new note set", true);
    const density = 1.0;
    const offsetChoices = [
        [0, 0, 12, 24, 27],
        [0, 0, 0, 12, 10, 19, 26, 27],
        [0, 1, 7, 10, 12, 13],
        [0],
        [0, 0, 0, 12],
        [0, 0, 12, 14, 15, 19],
        [0, 0, 0, 0, 12, 13, 16, 19, 22, 24, 25],
        [0, 0, 0, 7, 12, 15, 17, 20, 24],
    ];
    function changeNotes() {
        const root = rndInt(15) + 16;
        const offsets = choose(offsetChoices);
        noteSet.value = offsets.map(o => midiNoteToText(o + root));
    }
    function createPattern() {
        if (newNotes.value == true) {
            changeNotes();
            newNotes.value = false;
        }
        const pattern = [];
        for (let i = 0; i < 16; i++) {
            const chance = density * (i % 4 === 0 ? 0.6 : (i % 3 === 0 ? 0.5 : (i % 2 === 0 ? 0.3 : 0.1)));
            if (Math.random() < chance) {
                pattern.push({
                    note: choose(noteSet.value),
                    accent: Math.random() < 0.3,
                    glide: Math.random() < 0.1
                });
            }
            else {
                pattern.push({
                    note: "-",
                    accent: false,
                    glide: false
                });
            }
        }
        return pattern;
    }
    return {
        createPattern,
        newNotes,
        noteSet
    };
}
function NineOhGen() {
    function createPatterns(full = false) {
        const kickPattern = new Array(16);
        const ohPattern = new Array(16);
        const chPattern = new Array(16);
        const sdPattern = new Array(16);
        const kickMode = choose(["electro", "fourfloor"]);
        const hatMode = choose(["offbeats", "closed", full ? "offbeats" : "none"]);
        const snareMode = choose(["backbeat", "skip", full ? "backbeat" : "none"]);
        if (kickMode == "fourfloor") {
            for (let i = 0; i < 16; i++) {
                if (i % 4 == 0) {
                    kickPattern[i] = 0.9;
                }
                else if (i % 2 == 0 && Math.random() < 0.1) {
                    kickPattern[i] = 0.6;
                }
            }
        }
        else if (kickMode == "electro") {
            for (let i = 0; i < 16; i++) {
                if (i == 0) {
                    kickPattern[i] = 1;
                }
                else if (i % 2 == 0 && i % 8 != 4 && Math.random() < 0.5) {
                    kickPattern[i] = Math.random() * 0.9;
                }
                else if (Math.random() < 0.05) {
                    kickPattern[i] = Math.random() * 0.9;
                }
            }
        }
        if (snareMode == "backbeat") {
            for (let i = 0; i < 16; i++) {
                if (i % 8 === 4) {
                    sdPattern[i] = 1;
                }
            }
        }
        else if (snareMode == "skip") {
            for (let i = 0; i < 16; i++) {
                if (i % 8 === 3 || i % 8 === 6) {
                    sdPattern[i] = 0.6 + Math.random() * 0.4;
                }
                else if (i % 2 === 0 && Math.random() < 0.2) {
                    sdPattern[i] = 0.4 + Math.random() * 0.2;
                }
                else if (Math.random() < 0.1) {
                    sdPattern[i] = 0.2 + Math.random() * 0.2;
                }
            }
        }
        if (hatMode == "offbeats") {
            for (let i = 0; i < 16; i++) {
                if (i % 4 == 2) {
                    ohPattern[i] = 0.4;
                }
                else if (Math.random() < 0.3) {
                    if (Math.random() < 0.5) {
                        chPattern[i] = Math.random() * 0.2;
                    }
                    else {
                        ohPattern[i] = Math.random() * 0.2;
                    }
                }
            }
        }
        else if (hatMode == "closed") {
            for (let i = 0; i < 16; i++) {
                if (i % 2 === 0) {
                    chPattern[i] = 0.4;
                }
                else if (Math.random() < 0.5) {
                    chPattern[i] = Math.random() * 0.3;
                }
            }
        }
        return [kickPattern, ohPattern, chPattern, sdPattern];
    }
    return {
        createPatterns
    };
}
function rndInt(maxExcl) {
    return Math.floor(Math.random() * (maxExcl - 0.01));
}
function biRnd() {
    return Math.random() * 2 - 1;
}
function choose(array) {
    return array[rndInt(array.length)];
}
const lookupTable = new Map();
const revLook = new Map();
(() => {
    function add(note, n) {
        lookupTable.set(note, n);
        revLook.set(n, note);
    }
    add('A', 9);
    add('A#', 10);
    add('B', 11);
    add('C', 0);
    add('C#', 1);
    add('D', 2);
    add('D#', 3);
    add('E', 4);
    add('F', 5);
    add('F#', 6);
    add('G', 7);
    add('G#', 8);
})();
function textNoteToNumber(note) {
    const o = note.substring(note.length - 1);
    const n = note.substring(0, note.length - 1);
    // @ts-ignore
    return parseInt(o) * 12 + lookupTable.get(n) + 12;
}
function midiNoteToFrequency(noteNumber) {
    return 440 * Math.pow(2, (noteNumber - 69) / 12);
}
function midiNoteToText(note) {
    const octave = Math.floor(note / 12);
    const n = Math.floor(note % 12);
    const noteName = revLook.get(n);
    return `${noteName}${octave}`;
}
function pitch(note) {
    if (typeof (note) === 'number') {
        return midiNoteToFrequency(note);
    }
    else {
        return midiNoteToFrequency(textNoteToNumber(note));
    }
}
// @ts-ignore
function BAudio(au = new (window.AudioContext || window.webkitAudioContext)()) {
    function masterChannel() {
        const gain = au.createGain();
        gain.gain.value = 0.5;
        const limiter = au.createDynamicsCompressor();
        limiter.attack.value = 0.005;
        limiter.release.value = 0.1;
        limiter.ratio.value = 15.0;
        limiter.knee.value = 0.0;
        limiter.threshold.value = -0.5;
        const analyser = au.createAnalyser();
        analyser.fftSize = 2048;
        limiter.connect(analyser);
        gain.connect(limiter);
        limiter.connect(au.destination);
        return {
            in: gain,
            analyser
        };
    }
    function constantSourceCompatible() {
        if (au.createConstantSource) {
            return au.createConstantSource();
        }
        else {
            const src = au.createBufferSource();
            src.buffer = au.createBuffer(1, 256, au.sampleRate);
            const array = src.buffer.getChannelData(0);
            for (let i = 0; i < array.length; i++) {
                array[i] = 1.0;
            }
            const gain = au.createGain();
            const offsetParam = gain.gain;
            src.loop = true;
            src.connect(gain);
            return Object.assign(gain, { offset: offsetParam, start: () => src.start() });
        }
    }
    function decodeAudioDataCompatible(audioData) {
        return new Promise((resolve, reject) => {
            return au.decodeAudioData(audioData, resolve, reject);
        });
    }
    const master = masterChannel();
    function time(s) {
        return new Promise(resolve => { setTimeout(() => resolve(), s * 1000); });
    }
    function tone(pitch_1, attack_1, sustain_1, release_1) {
        return __awaiter(this, arguments, void 0, function* (pitch, attack, sustain, release, pan = 0.0, destination = master.in) {
            const osc = au.createOscillator();
            osc.type = "sawtooth";
            osc.frequency.value = pitch;
            osc.start();
            const filter = au.createBiquadFilter();
            filter.type = "lowpass";
            filter.frequency.value = pitch * 4;
            filter.Q.value = 5;
            const gain = au.createGain();
            gain.gain.value = 0.0;
            const panner = au.createPanner();
            panner.panningModel = "equalpower";
            panner.setPosition(pan, 0, 1 - Math.abs(pan));
            osc.connect(filter);
            filter.connect(gain);
            gain.connect(panner);
            panner.connect(destination);
            gain.gain.linearRampToValueAtTime(0.1, au.currentTime + attack);
            yield time(sustain + attack);
            gain.gain.setValueAtTime(0.1, au.currentTime);
            gain.gain.linearRampToValueAtTime(0, au.currentTime + release);
            filter.frequency.linearRampToValueAtTime(Math.max(pitch / 2, 400), au.currentTime + release);
            yield time(release + 0.01);
            osc.stop(au.currentTime);
            panner.disconnect();
        });
    }
    function SimpleToneSynth(attack, sustain, release, destination = master.in) {
        function play(note) {
            tone(pitch(note), attack, sustain, release, biRnd(), destination);
        }
        return {
            play
        };
    }
    function DelayInsert(time, feedback, wet, destination = master.in) {
        const delayNode = au.createDelay(1);
        delayNode.delayTime.value = time;
        const feedbackGain = au.createGain();
        feedbackGain.gain.value = feedback;
        delayNode.connect(feedbackGain);
        feedbackGain.connect(delayNode);
        const delayGain = au.createGain();
        delayGain.gain.value = wet;
        delayNode.connect(delayGain);
        delayGain.connect(destination);
        const synthOut = au.createGain();
        synthOut.gain.value = 1.0;
        synthOut.connect(delayNode);
        synthOut.connect(destination);
        return {
            in: synthOut,
            feedback: feedbackGain.gain,
            wet: delayGain.gain,
            delayTime: delayNode.delayTime
        };
    }
    function ThreeOh(type = "sawtooth", out = master.in) {
        const filter = au.createBiquadFilter();
        filter.type = "lowpass";
        filter.Q.value = 20;
        filter.frequency.value = 300;
        const pResonance = filter.Q;
        const pCutoff = filter.frequency;
        const decayTimeNode = constantSourceCompatible();
        decayTimeNode.start();
        const pDecay = decayTimeNode.offset;
        const env = constantSourceCompatible();
        env.start();
        env.offset.value = 0.0;
        function trigger() {
        }
        const scaleNode = au.createGain();
        scaleNode.gain.value = 4000;
        const pEnvMod = scaleNode.gain;
        env.connect(scaleNode);
        scaleNode.connect(filter.detune);
        const osc = au.createOscillator();
        osc.type = type;
        osc.frequency.value = 440;
        osc.start();
        const vca = au.createGain();
        vca.gain.value = 0.0;
        osc.connect(vca);
        vca.connect(filter);
        filter.connect(out);
        function noteOn(note, accent = false, glide = false) {
            if (accent) {
                env.offset.cancelScheduledValues(au.currentTime);
                //env.offset.setTargetAtTime(1.0,au.currentTime, 0.001);
                env.offset.setValueAtTime(1.0, au.currentTime);
                env.offset.exponentialRampToValueAtTime(0.01, au.currentTime + pDecay.value / 3);
            }
            else {
                env.offset.cancelScheduledValues(au.currentTime);
                //env.offset.setTargetAtTime(1.0,au.currentTime, 0.001);
                env.offset.setValueAtTime(1.0, au.currentTime);
                env.offset.exponentialRampToValueAtTime(0.01, au.currentTime + pDecay.value);
            }
            osc.frequency.cancelScheduledValues(au.currentTime);
            osc.frequency.setTargetAtTime(midiNoteToFrequency(textNoteToNumber(note)), au.currentTime, glide ? 0.02 : 0.002);
            vca.gain.cancelScheduledValues(au.currentTime);
            vca.gain.setValueAtTime(accent ? 0.2 : 0.15, au.currentTime);
            //vca.gain.setTargetAtTime(accent ? 0.5 : 0.3,au.currentTime, 0.001);
            //vca.gain.setValueAtTime(0.2, au.currentTime);
            vca.gain.linearRampToValueAtTime(0.1, au.currentTime + 0.2);
            trigger();
        }
        function noteOff() {
            vca.gain.cancelScheduledValues(au.currentTime);
            vca.gain.setTargetAtTime(0.0, au.currentTime, 0.01);
        }
        return {
            noteOn,
            noteOff,
            params: {
                cutoff: pCutoff,
                resonance: pResonance,
                envMod: pEnvMod,
                decay: pDecay
            }
        };
    }
    function kick(out = master.in) {
        const osc = au.createOscillator();
        osc.frequency.value = 400;
        const gain = au.createGain();
        gain.gain.value = 0.3;
        osc.start();
        osc.frequency.exponentialRampToValueAtTime(50, au.currentTime + 0.04);
        gain.gain.setValueCurveAtTime([0.5, 0.5, 0.45, 0.4, 0.25, 0.0], au.currentTime, 0.09);
        osc.stop(au.currentTime + 0.1);
        window.setTimeout(() => gain.disconnect(), 200);
        osc.connect(gain);
        gain.connect(out);
    }
    function loadBuffer(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            let lu = {
                'CH': _909CHBuffer,
                'SD': _909SDBuffer,
                'BD': _909BDBuffer,
                'OH': _909OHBuffer,
            };
            let arraybuffer = null;
            for (const [key, value] of Object.entries(lu)) {
                if (filePath.includes(key))
                    arraybuffer = value;
            }
            // const response = await fetch(filePath);
            // const arraybuffer = await response.arrayBuffer();
            if (arraybuffer == null) {
                throw 'couldnt load sample??';
            }
            const audioBuffer = yield decodeAudioDataCompatible(arraybuffer);
            return audioBuffer;
        });
    }
    function Sampler(file) {
        return __awaiter(this, void 0, void 0, function* () {
            const sampleBuffer = yield loadBuffer(file);
            function play(gain = 0.4, decay = 1.0, out = master.in) {
                const bufferSource = au.createBufferSource();
                bufferSource.buffer = sampleBuffer;
                bufferSource.loop = false;
                const gainNode = au.createGain();
                gainNode.gain.setValueAtTime(gain, au.currentTime);
                gainNode.gain.linearRampToValueAtTime(0.0, au.currentTime + decay);
                bufferSource.connect(gainNode);
                gainNode.connect(out);
                bufferSource.start(au.currentTime);
            }
            return {
                play
            };
        });
    }
    function SamplerDrumMachine(files_1) {
        return __awaiter(this, arguments, void 0, function* (files, out = master.in) {
            const sum = au.createGain();
            sum.gain.value = 1.0;
            sum.connect(out);
            const promisedMachines = files.map(Sampler);
            const samplers = yield Promise.all(promisedMachines);
            const mapped = samplers.map(sampler => ({
                play: (vel) => sampler.play(0.7 * vel, vel * 0.5, sum)
            }));
            return {
                triggers: mapped
            };
        });
    }
    return {
        tone,
        SimpleToneSynth,
        DelayInsert,
        ThreeOh,
        kick,
        Sampler,
        SamplerDrumMachine,
        master,
        context: au
    };
}
function genericParameter(name, value) {
    let listeners = [];
    const state = { value };
    function subscribe(callback) {
        callback(state.value);
        listeners.push(callback);
    }
    function publish() {
        for (let l of listeners) {
            l(state.value);
        }
    }
    return {
        name,
        subscribe,
        get value() { return state.value; },
        set value(v) { state.value = v; publish(); }
    };
}
function trigger(name, value = false) {
    return genericParameter(name, value);
}
function parameter(name, bounds, value) {
    return Object.assign(genericParameter(name, value), { bounds });
}
function pressToStart(fn, title, description, callToAction = "Click, tap or press any key to start") {
    const button = document.createElement("button");
    button.id = "_start_button";
    const introText = document.createElement("div");
    introText.id = "_intro_text";
    button.append(introText);
    introText.innerHTML = title + "<br><br>" + description + "<br><br>" + callToAction;
    document.head.insertAdjacentHTML("beforeend", `
    <style>
        body {
            height: 95vh;  margin: 0; padding: 0; 
        }
        #${button.id} {
            width: 100%;
            height: 100%;
            display: block;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 50;
            color:grey;
            background-color: black;
        }
        
        #${introText.id} {
            max-width: 640px;
            font-size: 1.5em;
            margin-left: auto;
            margin-right: auto;
            text-align:left;
            font-family: monospace;
        }
    </style>
    `);
    document.body.append(button);
    let started = false;
    function handleStartAction() {
        if (!started) {
            started = true;
            fn();
            button.style.display = "none";
        }
    }
    button.addEventListener("click", handleStartAction);
    window.addEventListener("keydown", handleStartAction);
}
function repeat(seconds, fn) {
    let time = new Date().getTime();
    let n = 0;
    function step() {
        const t = new Date().getTime() - time;
        fn(t, n);
        n++;
    }
    step();
    window.setInterval(step, seconds * 1000);
}
function Clock(bpm, subdivision = 4, shuffle = 0) {
    let currentBpm = bpm;
    let fn = (time, step) => { };
    let time = new Date().getTime();
    let n = 0;
    function bind(newFn) {
        fn = newFn;
    }
    function step() {
        const t = new Date().getTime() - time;
        fn(t, n);
        const shuffleFactor = n % 2 == 0 ? 1 + shuffle : 1 - shuffle;
        n++;
        window.setTimeout(step, shuffleFactor * (60000 / currentBpm) / subdivision);
    }
    window.setTimeout(step, (60000 / bpm) / subdivision);
    return {
        bind,
        setBpm: (bpm) => currentBpm = bpm
    };
}
function WanderingParameter(param, scaleFactor = 1 / 400) {
    const [min, max] = param.bounds;
    let diff = 0.0;
    let scale = scaleFactor * (max - min);
    let touchCountdown = 0;
    let previousValue = (min + max) / 2;
    const step = () => {
        if (previousValue != param.value) {
            // Something else has touched this parameter
            diff = 0;
            previousValue = param.value;
            touchCountdown = 200;
        }
        else {
            if (touchCountdown > 0) {
                touchCountdown--;
            }
            if (touchCountdown < 100) {
                diff *= touchCountdown > 0 ? 0.8 : 0.98;
                diff += (Math.random() - 0.5) * scale;
                param.value += diff;
                previousValue = param.value;
                if (param.value > min + 0.8 * (max - min)) {
                    diff -= Math.random() * scale;
                }
                else if (param.value < min + 0.2 * (max - min)) {
                    diff += Math.random() * scale;
                }
            }
        }
    };
    return {
        step
    };
}
function ThreeOhUnit(audio, waveform, output, gen, patternLength = 16) {
    const synth = audio.ThreeOh(waveform, output);
    const pattern = genericParameter("Pattern", []);
    const newPattern = trigger("New Pattern Trigger", true);
    gen.newNotes.subscribe(newNotes => {
        if (newNotes == true)
            newPattern.value = true;
    });
    function step(index) {
        if ((index === 0 && newPattern.value == true) || pattern.value.length == 0) {
            pattern.value = gen.createPattern();
            newPattern.value = false;
        }
        const slot = pattern.value[index % patternLength];
        if (slot.note != "-") {
            synth.noteOn(slot.note, slot.accent, slot.glide);
        }
        else {
            synth.noteOff();
        }
    }
    const parameters = {
        cutoff: parameter("Cutoff", [30, 700], 400),
        resonance: parameter("Resonance", [1, 30], 15),
        envMod: parameter("Env Mod", [0, 8000], 4000),
        decay: parameter("Decay", [0.1, 0.9], 0.5)
    };
    parameters.cutoff.subscribe(v => synth.params.cutoff.value = v);
    parameters.resonance.subscribe(v => synth.params.resonance.value = v);
    parameters.envMod.subscribe(v => synth.params.envMod.value = v);
    parameters.decay.subscribe(v => synth.params.decay.value = v);
    return {
        step,
        pattern,
        parameters,
        newPattern
    };
}
function NineOhUnit(audio) {
    return __awaiter(this, void 0, void 0, function* () {
        const drums = yield audio.SamplerDrumMachine(["909BD.mp3", "909OH.mp3", "909CH.mp3", "909SD.mp3"]);
        const pattern = genericParameter("Drum Pattern", []);
        const mutes = [
            genericParameter("Mute BD", false),
            genericParameter("Mute OH", false),
            genericParameter("Mute CH", false),
            genericParameter("Mute SD", false)
        ];
        const newPattern = trigger("New Pattern Trigger", true);
        const gen = NineOhGen();
        function step(index) {
            if ((index == 0 && newPattern.value == true) || pattern.value.length == 0) {
                pattern.value = gen.createPatterns(true);
                newPattern.value = false;
            }
            for (let i in pattern.value) {
                const entry = pattern.value[i][index % pattern.value[i].length];
                if (entry && !mutes[i].value) {
                    drums.triggers[i].play(entry);
                }
            }
        }
        return {
            step,
            pattern,
            mutes,
            newPattern
        };
    });
}
function DelayUnit(audio) {
    const dryWet = parameter("Dry/Wet", [0, 0.5], 0.5);
    const feedback = parameter("Feedback", [0, 0.9], 0.3);
    const delayTime = parameter("Time", [0, 2], 0.3);
    const delay = audio.DelayInsert(delayTime.value, dryWet.value, feedback.value);
    dryWet.subscribe(w => delay.wet.value = w);
    feedback.subscribe(f => delay.feedback.value = f);
    delayTime.subscribe(t => delay.delayTime.value = t);
    return {
        dryWet,
        feedback,
        delayTime,
        inputNode: delay.in,
    };
}
function AutoPilot(state) {
    const nextMeasure = parameter("upcomingMeasure", [0, Infinity], 0);
    const currentMeasure = parameter("measure", [0, Infinity], 0);
    const patternEnabled = genericParameter("Alter Patterns", true);
    const dialsEnabled = genericParameter("Twiddle With Knobs", true);
    const mutesEnabled = genericParameter("Mute Drum Parts", true);
    var hhh = 0;
    state.clock.currentStep.subscribe(step => {
        bangerState.step= step;
        bangerState.drumPattern= state.drums.pattern;

        var e = document.getElementById("info");
        if (e != null)
            e.innerText = `s${step} - m${currentMeasure.value}`;
        hhh++;
        if (step === 10) {
            currentMeasure.value = currentMeasure.value + 1;
            console.log(`mesure ${currentMeasure.value}`);
            if (currentMeasure.value % 8 == 5) {
                console.log('new patterns');
                var v = rndInt(7);
                state.notes[0].newPattern.value = true;
                state.notes[1].newPattern.value = true;
                state.drums.newPattern.value = true;
                state.drums.mutes[0].value = Math.random() < 0.2;
                state.drums.mutes[1].value = Math.random() < 0.5;
                state.drums.mutes[2].value = Math.random() < 0.5;
                state.drums.mutes[3].value = Math.random() < 0.5;
                state.gen.newNotes.value = true;
                /*
                            if( v == 0 || v == 1 )
                            {
                                state.notes[0].newPattern.value = true;
                                console.log('changing 303 1');
                            }
                            else if( v == 2 || v == 3 )
                            {
                                state.notes[1].newPattern.value = true;
                                console.log('changing 303 2');
                            }
                            else if( v == 4 || v == 5 )
                            {
                                state.drums.newPattern.value= true;
                
                                const drumMutes = [Math.random() < 0.2, Math.random() < 0.5, Math.random() < 0.5, Math.random() < 0.5];
                                state.drums.mutes[0].value = drumMutes[0];
                                state.drums.mutes[1].value = drumMutes[1];
                                state.drums.mutes[2].value = drumMutes[2];
                                state.drums.mutes[3].value = drumMutes[3];
                                console.log('changing 909');
                            }
                            else if( v == 6 )
                            {
                                state.gen.newNotes.value = true;
                                console.log('changing 303 notes');
                            }
                                */
            }
        }
    });
    const noteParams = state.notes.flatMap(x => Object.values(x.parameters));
    const delayParams = [state.delay.feedback, state.delay.dryWet];
    const wanderers = [...noteParams, ...delayParams].map(param => WanderingParameter(param));
    window.setInterval(() => { if (dialsEnabled.value)
        wanderers.forEach(w => w.step()); }, 100);
    return {
        switches: [
            patternEnabled,
            dialsEnabled,
            mutesEnabled
        ]
    };
}
function ClockUnit() {
    const bpm = parameter("BPM", [70, 200], 142);
    const currentStep = parameter("Current Step", [0, 15], 0);
    const clockImpl = Clock(bpm.value, 4, 0.0);
    bpm.subscribe(clockImpl.setBpm);
    clockImpl.bind((time, step) => {
        currentStep.value = step % 16;
    });
    return {
        bpm,
        currentStep
    };
}
function bangerStart() {
    return __awaiter(this, void 0, void 0, function* () {
        const audio = BAudio();
        const clock = ClockUnit();
        const delay = DelayUnit(audio);
        clock.bpm.subscribe(b => delay.delayTime.value = (3 / 4) * (60 / b));
        const gen = ThreeOhGen();
        const programState = {
            notes: [
                ThreeOhUnit(audio, "sawtooth", delay.inputNode, gen), ThreeOhUnit(audio, "square", delay.inputNode, gen)
            ],
            drums: yield NineOhUnit(audio),
            gen,
            delay,
            clock,
            masterVolume: parameter("Volume", [0, 1], 0.2)
        };
        programState.masterVolume.subscribe(newVolume => { audio.master.in.gain.value = newVolume; });
        clock.currentStep.subscribe(step => [...programState.notes, programState.drums].forEach(d => d.step(step)));
        const autoPilot = AutoPilot(programState);
    });
}
// pressToStart(start, "The Endless Acid Banger", "A collaboration between human and algorithm by Vitling");